1) define a functional interface "First" with an abstract method "void disp1()" , default method "void disp2()" and a static method "void disp3()"

inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
also invoke "disp3()" method inside main.

Answer:
interface First
{
	void disp1();
	default void disp2()
	{
		
		System.out.println("Inside disp2");
	}
	static void disp3()
	{
		System.out.println("Inside disp3");
	}
}

public class Myclass
{
	public static void main(String args[])
	{
		First ref=()->{System.out.println("Output as follows:");};
		ref.disp1();
		ref.disp2();
		First.disp3();
	}
}


2) define a functional interface "Second" with an abstract method "void disp4()".

define a class Demo with main function.
inside main function create two implementations of "Second" using lambda expression and display their names.

Answer:
interface Second
{
	void disp4();
}

public class Demo
{
	public static void main(String args[])
	{
		//For 1st lambda
		Second ref=()->{System.out.println("Output as follows for lambda 1:");};
		ref.disp4();
		System.out.println("Name of the class is: "+ref.getClass().getName());
		
		//For 2nd lambda
		Second ref1=()->{System.out.println("Ouput as follows for lambda2: ");};
		ref1.disp4();
		System.out.println("Name of the class is: "+ref1.getClass().getName());
		
	}
}


3) define a functional interface "MyInterface" with an abstract method "void fun()"

define a class Demo with two functions "static void perform" and main.

from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.

Answer:

interface MyInterface
{
	void fun();
}

public class Demo
{
	static void perform(MyInterface ref)
	{
		ref.fun();
		System.out.println("Name of Lambda is: "+ref.getClass().getName());
	}
	public static void main(String args[])
	{
		perform(()->{System.out.println("Output as follows: ");});
     	        perform(()->{System.out.println("Output as follows: ");});
		perform(()->{System.out.println("Output as follows: ");});	
	}
}


4) define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
define a class "CalcDemo" with main method.
inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and display its result.

Answer:
interface Calculator
{
	int Multiply(int a,int b);
}

public class CalDemo
{
	public static void main(String args[])
	{
		//For 1st lambda
		Calculator ref=(a,b)->{return (a+b);};
		System.out.println("Ouput for 1st lambda is: "+ref.Multiply(10, 20));
		System.out.println("Name of lambda is: "+ref.getClass().getName());
		
		//For 2nd lambda
		Calculator ref1=(a,b)->{return (a+b);};
		System.out.println("Output for 2nd lambda is: "+ref.Multiply(30,50));
		System.out.println("Name of lambda is: "+ref.getClass().getName());
		
	}
} 


5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.

create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of "Display" class.

create 2 threads and pass above created "Runnable" implementation to these threads.
make sure while one thread is executing other thread will not interfere.

Answer:

class Display
{
	synchronized void disp()
	{
		for(int i=1;i<=10;i++)
		{
			System.out.println("Value is : "+i+" for "+Thread.currentThread());
		}
	}
}

public class Demo
{
	public static void main(String args[])
	{
		Display d=new Display();
		Runnable ref=()->{d.disp();};
		Thread t1= new Thread (ref);
		Thread t2 = new Thread(ref);
		t1.setName("First");
		t2.setName("Second");
		t1.start();
		t2.start();
	}
}
