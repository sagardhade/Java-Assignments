
Q1)Define your exception class by name "MyArithException"
(MyArithException.java)
define class "Calculator"   (Calculator.java)
In this class define a function,which will accept an int and return double of it.
e.g int caldouble(int)
This function will check an int which is passed to it
It will raise the  exception if 0 is passed or negative passed
in case of 0 caller of this method should get error message
"Zero not allowed" 
in case of negative caller of this method should get error message
"negative not allowed"
In case of positive value it should simply return the double value.
	[ this method shouldn't handle the exception]

Now define class "MyCalcApp" (MyCalcApp.java)
In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.


Answer:

class MyArithException extends Exception
{
	public MyArithException(String str)
	{
		super(str);

	}
}

class Calculator
{
	int caldouble(int num) throws MyArithException
	{
		if(num<0)
		{
			throw new MyArithException("Less than zero is not allowed.");
		}
		else if(num==0)
		{
			throw new MyArithException("Zero is not allowed");
		}
		return num*2;
	}
}


public class Myclass
{
	public static void main(String args[])
	{
		Calculator c1= new Calculator();
		try 
		{
			int result=c1.caldouble(-5);
			System.out.println(result);	
		}

		catch(Exception ex)
		{
			System.out.println(ex);
		}
	}
}



Q.3)define "MyException" as a checked exception.

define a class "Demo" with 
	public void show1(), public void show2() , public void show3() and main functions.

inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
	[ this method shouldn't handle the exception]

main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"

show2() should not handle the exception but show1() should handle.


Answer:

import java.util.Scanner;

class MyException extends Exception
{
   MyException(String str)
   {
	   super(str);
   }
}

public class Demo
{
	void show1()
	{
		try 
		{
			show2();
			System.out.println("Done");
		} 
		catch (Exception ex) 
		{
			System.out.println(ex);
		}
	}
	void show2() throws MyException
	{
		show3();
	}
	void show3() throws MyException
	{
		Scanner sc= new Scanner(System.in);
		int num= sc.nextInt();
		if(num>10)
		{
			throw new MyException("Value is greater than 10 not allowed");
		}
	}
	public static void main(String args[])
	{
		Demo d1= new Demo();
		d1.show1();
		
	}
}

4) on the developer side create following checked exception:
	InvalidLengthException
create necessary jar file and documentation.

on client side

public class Authenticator
	with
a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
	[ constructor shouldn't handle the exception]

create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.

Answer:

class InvalidLengthException extends Exception
{
	public InvalidLengthException(String str)
	{
		super(str);
	}
}

class Authenticator
{
	
	public Authenticator(String password) throws InvalidLengthException
	{
		if(password.length()>9||password.length()<5)
		{
			throw new InvalidLengthException("Number size is invalid");
		}
		else
		{
			done();
		}
	}
	
	void done()
	{
		System.out.println("Succesful Authentication");
		System.out.println("Done!");
	}
}



public class Demo
{
	public static void main(String args[])
	{
		try 
		{
			Authenticator auth=new Authenticator("Password");
		} 
		catch (Exception e)
		{
			e.printStackTrace();
		}
		
	}
}

5) on the developer side 
create checked exception "ResourceNotAllocatedException"

create a class:

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
		
	}
}

create necessary jar file and documentation

on the client side
public class Demo with main function

	inside main function, create object of "MyResource" and invoke "disp()" method.


Answer:

class ResourceNotAllocatedException extends Exception
{
	public ResourceNotAllocatedException(String str)
	{
		super(str);
	}
}


class MyResource implements AutoCloseable
{
	MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("Invalid Capacity");
		}
		else
		{
			disp();
		}
	}
	
	void disp()
	{
		System.out.println("Successful");
	}
	
	
	@Override
     public void close() throws Exception 
	{
		System.out.println("Resource is closed.");
		
	}
}


public class Myclass
{
	public static void main(String args[])
	{
		try
		{
			MyResource MR=new MyResource(500);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	
	}
}
